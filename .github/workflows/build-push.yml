name: Appointment Service CI/CD Pipeline
 
on:
  push:
    branches: [ main ]
    paths:
      - 'appointment-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'appointment-service/**'
 
env:
  REGISTRY_LOGIN_SERVER: appointmentservice.azurecr.io
  IMAGE_NAME: appointment-service
 
jobs:
 
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
   
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
 
    - name: Setup Node.js Environment
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: appointment-service/package-lock.json
 
    - name: Install Dependencies
      working-directory: appointment-service
      run: |
        echo "Installing npm dependencies..."
        npm ci
        echo "Dependencies installed successfully"
 
    - name: Run Tests
      working-directory: appointment-service
      run: |
        echo "Running application tests..."
        npm test --if-present
        echo "Tests completed"
 
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
 
    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: appointmentservice
        password: ${{ secrets.APPOINTMENT_ACR_PASSWORD }}
 
    - name: Extract Image Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
 
    - name: Build Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: appointment-service
        file: appointment-service/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/appointment-image.tar
 
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: appointment-docker-image
        path: /tmp/appointment-image.tar
        retention-days: 1
 
    - name: Build Stage Complete
      run: |
        echo "BUILD STAGE COMPLETED SUCCESSFULLY!"
        echo "Image built: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
 
